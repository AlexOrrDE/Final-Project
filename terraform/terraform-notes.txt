We need to make sure that the .terraform folder is in the .gitignore, or we will have problems when pushing.

We used the security credentials found on the IAM page/ make access key (need to change these later) and stored them locally

We added a .gitkeep file to the layer/python folder as it is otherwise empty

To fill out the layer/python folder we need to pip install there with (check this command)

pip install -r requirements.txt -t ./layer/python

or maybe (from outside of Final-Project)

pip install -r requirements.txt -t ./Final-Project/layer/python

In the lambda.tf file we have set specific runtimes for Python. These are required for a zip file but we can change them to be more recent ones probably.

When setting up the scheduler (in eventbridge.tf), according to 

https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/scheduler_schedule

the role_arn is the role for the scheduler itself (not the lambda as it might seem). It links to 

https://docs.aws.amazon.com/scheduler/latest/UserGuide/setting-up.html#setting-up-execution-role

which gives the execution role for the scheduler. In iam.tf we make an eventbridge role (this doesn't let it use the lambda yet, it just makes a role).

The JSON we need to actually allow use of the lambda is given here:

https://docs.aws.amazon.com/scheduler/latest/UserGuide/setting-up.html#setting-up-execution-role

step 3 (lambda invoke box).

Finally 

https://developer.hashicorp.com/terraform/tutorials/aws/aws-iam-policy

tells us how to turn this into a policy and attach this to the eventbridge role.

For the logs permissions there is a good tutorial here

https://stackoverflow.com/questions/59949808/write-aws-lambda-logs-to-cloudwatch-log-group-with-terraform#:~:text=If%20you%20want%20Terraform%20to,change%20the%20name%20at%20all.

Note that the name for the cloudwatch log group in the iam is important and connected to the function.

Because (?) pandas depends on numpy we need to install that too.

Links:

For allowing a lambda access to s3:

https://us-east-1.console.aws.amazon.com/iam/home#/policies/arn:aws:iam::aws:policy/AmazonS3FullAccess$jsonEditor

Instead of attaching the policy directly we can instead create a policy from a JSON, see for more information
https://docs.aws.amazon.com/lambda/latest/dg/access-control-resource-based.html
https://developer.hashicorp.com/terraform/tutorials/aws/aws-iam-policy

For example where we make a policy for invoking a (many) lambda, from
https://docs.aws.amazon.com/scheduler/latest/UserGuide/setting-up.html#setting-up-execution-role

Eventbridge policy:

https://us-east-1.console.aws.amazon.com/iamv2/home?region=eu-west-2#/policies/details/arn%3Aaws%3Aiam%3A%3Aaws%3Apolicy%2FAmazonEventBridgeSchedulerFullAccess?section=permissions&view=json

https://docs.aws.amazon.com/scheduler/latest/UserGuide/setting-up.html#setting-up-execution-role

Define the log group
https://stackoverflow.com/questions/59949808/write-aws-lambda-logs-to-cloudwatch-log-group-with-terraform#:~:text=If%20you%20want%20Terraform%20to,change%20the%20name%20at%20all.

Policies for accessing secrets
https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access_examples.html

